name: Desktop Browser Tests (MV-WebApp)

on:                                           # melsayed: When will the tests be triggered?
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '00 3 * * *'
  workflow_dispatch:

jobs:
  browser:
    name: Run Browser-based Tests
    runs-on: ${{ matrix.os }}                 # melsayed: parametrize OS
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-latest, macOS-12 ]   # melsayed: parameter values
    steps:
      - name: Checkout Code                   # melsayed: Step 1 -> Check out the code in the repo
        uses: actions/checkout@v3
      - name: Setup Node.js environment       # melsayed: Step 2 -> Setup the Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Set up Native Selenium Grid     # melsayed: Step 3 -> Set up a selenium grid over a docker compose (in case of running tests on Linux)
        if: runner.os == 'Linux'
        run: docker-compose -f src\test\resources\docker-compose\selenium4.yml up --scale chrome=4 --scale edge=0 --scale firefox=0 -d
      - name: Set up JDK 17                   # melsayed: Step 4 -> Set up the JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
      - name: Check running containers
        if: runner.os == 'Linux'
        run: docker ps
      - name: Run tests on Linux/MacOS        # melsayed: Step 6 -> Running tests on Linux and MacOS
        if: runner.os != 'Windows'
        continue-on-error: true
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
               mvn test -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="Linux-64" -DmaximumPerformanceMode="2" -DtargetBrowserName="GoogleChrome" -DgenerateAllureReportArchive="true" -Dtest="!%regex[.*Test_MobileEmulation.*], !%regex[.*Test_Healenium.*], !%regex[.*selfRelease.*], !%regex[.*BuildAndRelease.*], !%regex[.*checksum.*], !%regex[.*cucumber.*], !%regex[.*sikulix.*], !%regex[.*imageComparison.*], !%regex[.*FileActions.*], !%regex[.*TerminalActions.*], !%regex[.*localShell.*], !%regex[.*fullPageScreenshotWithHeader.*], !%regex[.*dbConnection.*], !%regex[.*Appium.*], !%regex[.*Android.*], !%regex[.*IOS.*], !%regex[.*Windows.*]"
          elif [ "$RUNNER_OS" == "macOS" ]; then
               mvn test -DexecutionAddress="browserstack" -DtargetOperatingSystem="Mac-64" -DmaximumPerformanceMode="1" -DtargetBrowserName="Safari" "-DbrowserStack.os=OS X" "-DbrowserStack.osVersion=Monterey" "-DbrowserStack.browserVersion=15.3" -DgenerateAllureReportArchive="true" -Dtest="!%regex[.*Test_MobileEmulation.*], !%regex[.*Test_Healenium.*], !%regex[.*selfRelease.*], !%regex[.*BuildAndRelease.*], !%regex[.*checksum.*], !%regex[.*cucumber.*], !%regex[.*sikulix.*], !%regex[.*imageComparison.*], !%regex[.*FileActions.*], !%regex[.*TerminalActions.*], !%regex[.*localShell.*], !%regex[.*fullPageScreenshotWithHeader.*], !%regex[.*dbConnection.*], !%regex[.*Appium.*], !%regex[.*Android.*], !%regex[.*IOS.*], !%regex[.*Windows.*], !%regex[.*BasicAuthentication.*]"
          else
               echo "$RUNNER_OS not supported"
               exit 1
          fi  
      - name: Run tests on Windows            # melsayed: Step 7 -> Running tests on Windows
        if: runner.os == 'Windows'
        continue-on-error: true
        run: |
          mvn test -DexecutionAddress="local" -DtargetOperatingSystem="Windows-64" -DmaximumPerformanceMode="2" -DtargetBrowserName="MicrosoftEdge" -DgenerateAllureReportArchive="true" -Dtest="!%regex[.*Test_MobileEmulation.*], !%regex[.*Test_Healenium.*], !%regex[.*selfRelease.*], !%regex[.*BuildAndRelease.*], !%regex[.*checksum.*], !%regex[.*cucumber.*], !%regex[.*sikulix.*], !%regex[.*imageComparison.*], !%regex[.*FileActions.*], !%regex[.*TerminalActions.*], !%regex[.*localShell.*], !%regex[.*fullPageScreenshotWithHeader.*], !%regex[.*dbConnection.*], !%regex[.*Appium.*], !%regex[.*Android.*], !%regex[.*IOS.*], !%regex[.*Windows.*]"

      - name: Upload Allure Report as Pipeline Artifact    # melsayed: Step 8 -> Uploading generated allure reports 
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} - Desktop Browsers Tests Allure Report
          path: "generatedReport_*.zip"

      - name: Upload Extent Report as Pipeline Artifact    # melsayed: Step 9 -> Uploading generated extent reports 
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ runner.os }} - Desktop Browsers Tests Extent Report
          path: "extent-reports/ExtentReports_*.html"
